---
import CommercialCard from '@components/section-recent-commercials/CommercialCard.astro';
import CommercialCardSkeleton from './CommercialCardSkeleton.astro';
import { getAllCommercials, getFavouriteCommercials, getSnippetThumbnail, isVideoAvailable, type TYoutubePlaylistItemSnippet } from '@scripts/commercials.utils';
import { filterAvailableVideos } from '@scripts/commercials.utils';
import { commercialsRecent } from '@data/youtube.api';

const MAX_CAPTION_LENGTH = 80;
const MIN_AVAILABLE_VIDEO_COUNT = 5;

let playlistData: TYoutubePlaylistItemSnippet[] | null = null;

try {
  let response = await getFavouriteCommercials();
  // @ts-ignore
  let availableVideos = filterAvailableVideos(response?.items)
  if (availableVideos && availableVideos?.length < MIN_AVAILABLE_VIDEO_COUNT) {
    response = await getAllCommercials()
    console.log(response)
    availableVideos = filterAvailableVideos(response?.items)
    if (availableVideos.length > commercialsRecent.maxResults) availableVideos.length = 15;
  }
  playlistData = availableVideos
} catch (error) {
  console.log(error);
}
---

{
  playlistData && playlistData?.length > 0
  // @ts-ignore
    ? playlistData.map(({snippet}) => {
      let {title, thumbnails, resourceId} = snippet;

      const thumb = getSnippetThumbnail(thumbnails);
      if (title.length > MAX_CAPTION_LENGTH) {
        title = title.slice(0, MAX_CAPTION_LENGTH - 3) + '...';
      }
      return <CommercialCard
                              {title} src={thumb.url}
                              width={thumb.width+'px'} height={thumb.height+'px'}
                              videoId={resourceId?.videoId} />
      })
    : (
      <CommercialCardSkeleton />
      <CommercialCardSkeleton index={1}/>
      <CommercialCardSkeleton index={2}/>
    )
}