---
import { getCollection } from 'astro:content';
import ServiceCard from './ServiceCard.astro';

const services = await getCollection('services')
---

<section id="services" class="services">
  <div class="container services__container">
    <h2 class="section__heading services__heading">
      <span>перелік наших</span>
      <span class="accent line2">послуг</span>
    </h2>
    <div class="tabs services__tabs">
      <div class="tabs__nav" data-service-tab-list>
        {
          services?.map(({data, id}, idx) => {
            let subServiceCount = data.variation.length.toString().padStart(2, "0")
            let tabIndex = String(idx + 1).padStart(2, '0')
            return ( 
              <label class="tab nav__control">
                <input 
                  type="radio" 
                  name="se-services" 
                  value={id}
                  data-tab={tabIndex} 
                  checked={idx === 0}/>
                <span class="tab-caption">{data.title}:<span class="tab-caption__extra">{subServiceCount}</span></span>
              </label>
            )
          })
        }
      </div>

      <div class="tab__content" data-service-tab-content>
        {
          services?.map((service, idx) =>{
            return <ServiceCard {service} {idx}/>
          })
        }
      </div>
    </div>
  </div>
</section>

<script>
  const serviceSelectors = {
    priceEl: '[data-variant-price]',
    durationEl: '[data-variant-duration]',
    variantEl: '[data-service-variant="active"]',
  }
  const SERVICE_DEFAULT = {
    price: String.fromCodePoint(0x20B4),
    duration: 'час',
  }

  const serviceTabNodes =[...document.querySelectorAll<HTMLInputElement>('se-services')];
    const serviceDetailsElements = document.querySelectorAll<HTMLDivElement>('[data-service-group]');
  let activeServiceTab = serviceTabNodes.find(tab => tab.checked)!;
  let serviceGroupShown = serviceDetailsElements.item(0);
  let activeServiceVariant = findElement<HTMLLIElement>(serviceGroupShown, serviceSelectors.variantEl);
  let priceOutputElement = findElement<HTMLSpanElement>(serviceGroupShown, serviceSelectors.priceEl);
  let durationOutputElement = findElement<HTMLSpanElement>(serviceGroupShown, serviceSelectors.durationEl);
  
  if (activeServiceVariant) { 
    priceOutputElement &&
      updateServiceInfo(  priceOutputElement,
                          activeServiceVariant.dataset.servicePrice,
                          SERVICE_DEFAULT.price );
    durationOutputElement && 
      updateServiceInfo(  durationOutputElement,
                          activeServiceVariant.dataset.serviceDuration,
                          SERVICE_DEFAULT.duration  );
  }

  serviceTabNodes.forEach(tab => { tab.addEventListener('change', changeTabHandler) });
  serviceDetailsElements.forEach(el => { el.addEventListener('pointerover', onServiceDetailsHover) });

  function changeTabHandler<E extends Event>(e: E) {
    activeServiceTab = e.target as HTMLInputElement;
  }

function onServiceDetailsHover(e: Event) {
    if (!(e.target as HTMLElement)?.hasAttribute('data-service-variant')) return;
    
    let currentServiceGroup = e.currentTarget as HTMLDivElement
    let hoveredElement = e.target as HTMLLIElement;

    if (wasServiceGroupChanged(currentServiceGroup, serviceGroupShown)) {
      resetServiceInfo();
      serviceGroupShown = currentServiceGroup
      priceOutputElement = findElement(serviceGroupShown, serviceSelectors.priceEl);
      durationOutputElement = findElement(serviceGroupShown, serviceSelectors.durationEl);
    }

    if (activeServiceVariant !== hoveredElement) {
      activeServiceVariant && setServiceVariant(activeServiceVariant, '');
      setServiceVariant(hoveredElement, 'active');
      activeServiceVariant = hoveredElement;
    }

    priceOutputElement = findElement(currentServiceGroup, serviceSelectors.priceEl);
    durationOutputElement = findElement(currentServiceGroup, serviceSelectors.durationEl);
    
    priceOutputElement && updateServiceInfo(priceOutputElement, hoveredElement.dataset.servicePrice, SERVICE_DEFAULT.price)
    durationOutputElement && updateServiceInfo(durationOutputElement, hoveredElement.dataset.serviceDuration, SERVICE_DEFAULT.duration);
  }

  function wasServiceGroupChanged<T extends HTMLElement>(currentGroup: T, shownGroup: T):boolean {
    return currentGroup.dataset.serviceGroup !== shownGroup.dataset.serviceGroup
  }

  function findElement<U extends Element>(parent: Element, selector: string) {
    return parent.querySelector<U>(selector)
  }

  function updateServiceInfo<U extends HTMLElement>(outputEl: U, value: string = "", fallbackValue: string = "") {
    outputEl.innerText = value || fallbackValue;
  }

  function resetServiceInfo() {
    priceOutputElement && updateServiceInfo(priceOutputElement, SERVICE_DEFAULT.price);
    durationOutputElement && updateServiceInfo(durationOutputElement, SERVICE_DEFAULT.duration);
  }

  function setServiceVariant<E extends HTMLElement>(element: E, value: 'active' | '' = "") {
    element.dataset.serviceVariant = value;
  }

  function isServiceGroupHidden<G extends HTMLElement>(group: G) {
    return group.style.display == 'none';
  }
</script>

<style is:global>
  .services {
    overflow-x: clip;
  }

  .services__container {
    margin-block-start: var(--section-interval);
  }

  .services__heading > .line2 {
    margin-inline-start: 12ch;
  }

  .services__tabs {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(min(400px, 100%), 1fr));
    align-items: start;
    margin-block-start: clamp(1.5rem, 0.2857rem + 6.0714vw, 5.75rem);

    @media (width > 48rem) {
        grid-template-columns: 1fr auto;  
    }
  }

  .tabs__nav {
    order: 2;
    width: fit-content;
    display: flex;
    flex: 1 1 100%;
    flex-wrap: wrap;
    align-items: start;
    justify-content: end;
    gap: clamp(0.75rem, 0.5039rem + 0.829vw, 1.25rem) 6px;

    @media (width > 48rem) {
      --fluid-0-60: clamp(0rem, -4.3041rem + 8.9552vw, 3.75rem);
        justify-self: center;
        flex-direction: column;
        align-content: start;
        width: max-content;
        margin-inline: var(--fluid-0-60);
    }
  }

  .tab.nav__control {
    --fluid-12-30: clamp(0.75rem, 0.2785rem + 1.7751vw, 1.875rem);
      display: inline-block;
      width: fit-content;
      padding-block: 6px;
      padding-inline: 16px;
      border-radius: 10ch;
      background-color: var(--swatch-neutral-700);
      font-size: var(--fluid-12-30);
      transition: all 450ms ease;
      cursor: pointer;

    @media (width > 48rem) {
      padding-block: 0;
      color: var(--swatch-neutral-400);
      background-color: transparent;
    }
  }

  .tab.nav__control:has([data-tab]:checked) {
    color: var(--swatch-neutral-400);
    background-color: var(--swatch-neutral-200);

    @media (width > 48rem) {
      color: var(--swatch-neutral-200);
      background-color: transparent;
    }
  }

  .tab > input[type='radio'] {
    display: none;
  }

  .tab-caption {
      text-transform: uppercase;
  }

  .tab-caption__extra {
    display: none;
    font-size: clamp(0.75rem, 0.6786rem + 0.3571vw, 1rem);
    vertical-align: super;

    @media (width >= 40rem) {
      display: inline;
    }
  }
  
  .tabs:has([data-tab="01"]:checked) .service__details[data-tab-details="01"],
  .tabs:has([data-tab="02"]:checked) .service__details[data-tab-details="02"],
  .tabs:has([data-tab="03"]:checked) .service__details[data-tab-details="03"],
  .tabs:has([data-tab="04"]:checked) .service__details[data-tab-details="04"],
  .tabs:has([data-tab="05"]:checked) .service__details[data-tab-details="05"],
  .tabs:has([data-tab="06"]:checked) .service__details[data-tab-details="06"],
  .tabs:has([data-tab="07"]:checked) .service__details[data-tab-details="07"], 
  .tabs:has([data-tab="08"]:checked) .service__details[data-tab-details="08"],
  .tabs:has([data-tab="09"]:checked) .service__details[data-tab-details="09"] {
      display: flex;
      flex-wrap: nowrap;
      width: max-content;

    .list__item {
        opacity: 0;
        transform: translateX(-10ch);
        animation: 
            fadeIn 1.2s linear forwards, 
            slideIn 450ms linear forwards;
        animation-delay: var(--animation-delay, 0);
    }

    .service__price > span,
    .service__duration > span {
        opacity: 0;
        animation: fadeIn 1s linear forwards;
        animation-delay: var(--animation-delay, 0)
    }

    .service__thumb > img {
        animation-delay: var(--animation-delay, 0);
    } 
  }

  .tab__content {
      margin-inline-start: -4rem;
  }

@media screen and (width > 26.75rem) {
    .services__heading {
      width: fit-content;
      margin-inline: auto;
    }
}

@keyframes fadeIn {
    to {
        opacity: 1;
    }
}

@keyframes slideIn {
    to {
        transform: translateX(0);
    }
}

@keyframes toRight {
    to {
        translate: 0rem;
    }
}
</style>